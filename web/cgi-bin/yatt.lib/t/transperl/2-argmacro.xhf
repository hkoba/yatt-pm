FILE: doc/test1/.htyattrc
IN:
 use YATT::ArgMacro test1 => in => [qw(pair)], out => [qw(x y)];
 use YATT::LRXML::Node;
 
 test1->define(handle => sub {
   (my test1 $macro, my ($trans, $scope, $node)) = @_;
   my ($x, $y) = split /,/, node_body($macro->{cf_pair});
   $node->add_attribute(x => $x);
   $node->add_attribute(y => $y);
   $node;
 });

TITLE: hello pair => x, y
FILE: doc/test1/index.html
IN:
 <!yatt:args>
 <yatt:hello pair='3,8'>world!</yatt:hello>
 
 <!yatt:widget hello %test1; >
 <h2>Hello <yatt:body/></h2>
 &perl:x; x &perl:y; = <?perl= $x * $y?>
OUT:
 <h2>Hello world!</h2>
 3 x 8 = 24
 

TITLE: hello => real => x, y
FILE: doc/test1/t2.html
IN:
 <!yatt:args>
 <yatt:hello pair='3,8'/>
 
 <!yatt:widget hello %test1;  %yatt:no_last_newline;>
 <yatt:real x y />
 
 <!yatt:widget real %test1;  %yatt:no_last_newline;>
 &perl:x; x &perl:y; = <?perl= $x * $y?>
OUT:
 3 x 8 = 24
# eol.

TITLE: hello => real => x, y
FILE: doc/test1/t2.html
IN:
 <!yatt:args>
 <yatt:hello pair='3,8'/>
 
 <!yatt:widget hello %test1; %yatt:no_last_newline;>
 <yatt:deep x y />
 
 <!yatt:widget deep %test1;  %yatt:no_last_newline;>
 <yatt:real x y />
 
 <!yatt:widget real %test1;  %yatt:no_last_newline;>
 &perl:x; x &perl:y; = <?perl= $x * $y?>
OUT:
 3 x 8 = 24
# eol.
